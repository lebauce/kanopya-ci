#!/bin/bash

source /vagrant/environment.sh

# Hacks for CentOS box
if [ -f /etc/redhat-release ];
then
    vgrename kanopya kanopyavg
    yum -y install perl-TAP-Formatter-JUnit perl-Devel-Cover-Report-Clover
    # hostname centos-kanopya-appliance
    # domainname hederatech.com
    # echo 127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 > /etc/hosts
    # echo 127.0.1.1   centos-kanopya-appliance.hederatech.com centos-kanopya-appliance >> /etc/hosts
    # echo ::1         localhost localhost.localdomain localhost6 localhost6.localdomain6 >> /etc/hosts
    # service mysql restart
    # service rabbitmq-server restart
    # echo domain hederatech.com > /etc/resolv.conf
    # echo nameserver 192.168.2.1 >> /etc/resolv.conf
    # echo nameserver 127.0.0.1 >> /etc/resolv.conf
fi

# temporary trick to puppet mysql handling
cat > /root/.my.cnf <<EOF
[client]
password = "K4n0pY4"
EOF

# stop puppet and puppet master
[ -e /var/run/puppet/agent.pid ] && service puppet stop
[ -e /var/run/puppet/master.pid ] && service puppetmaster stop

# set default gateway in our lan
ip route change default via 192.168.2.1

# Set up IP forwarding so that the deployed hosts have access to the Net
echo 1 > /proc/sys/net/ipv4/ip_forward
iptables -t nat -A POSTROUTING -o eth2 -j MASQUERADE

cat /vagrant/environment.sh > /etc/profile.d/kanopya.sh
echo "export PERL5LIB=$PERL5LIB:/opt/kanopya/lib/executor/:/opt/kanopya/lib/external/:/opt/kanopya/lib/administrator/:/opt/kanopya/lib/common:/opt/kanopya/lib/orchestrator:/opt/kanopya/lib/monitor:/opt/kanopya/lib/external/NetApp:/opt/kanopya/lib/test:/opt/kanopya/lib/component/kanopya_executor:/opt/kanopya/lib/component/kanopya_front:/opt/kanopya/lib/component/kanopya_aggregator:/opt/kanopya/lib/component/kanopya_rulesengine" >> /etc/profile.d/kanopya.sh
source /etc/profile.d/kanopya.sh

sed -i 's/ISCSITARGET_ENABLE=false/ISCSITARGET_ENABLE=true /g' /etc/default/iscsitarget
sed -i 's/Trace(0)/Trace(1)/g' /opt/kanopya/lib/common/Kanopya/Exceptions.pm

sed -i "s/system\('\/etc\/init\.d\/puppetmaster', \$puppetmaster_action\)\;//g" /opt/kanopya/scripts/install/Setup/Linux.pm

# patch dhcp puppet module
cd /opt/kanopya/templates/components/puppetmaster/modules/dhcp && patch -p1 <<EOF
diff --git a/manifests/host.pp b/manifests/host.pp
index adb9722..f899c32 100644
--- a/manifests/host.pp
+++ b/manifests/host.pp
@@ -1,7 +1,9 @@
 define dhcp::host (
   \$ip,
   \$mac,
-  \$comment=''
+  \$pxeserver           = undef,
+  \$pxefilename         = undef,
+  \$comment             = ''
 ) {
 
   $host = $name
diff --git a/templates/dhcpd.host.erb b/templates/dhcpd.host.erb
index c9c704d..beee71b 100644
--- a/templates/dhcpd.host.erb
+++ b/templates/dhcpd.host.erb
@@ -2,4 +2,10 @@ host <%= host %> {
   hardware ethernet   <%= mac %>;
   fixed-address       <%= ip %>;
   option host-name    "<%= name %>";
+  # BEGIN PXE Section
+  <% if @pxeserver and @pxefilename then -%>
+next-server <%= @pxeserver %>;   
+  filename "<%= @pxefilename %>";
+  <% end -%>
+# END PXE Section
 }
EOF

# Set up Hiera
echo nameserver 192.168.2.1 > /etc/resolv.conf
echo nameserver 192.168.10.254 >> /etc/resolv.conf
DEBIAN_FRONTEND=noninteractive apt-get -y --force-yes install ruby-hiera ruby-hiera-puppet
gem install hiera hiera-puppet
git clone -b 1.x git://github.com/puppetlabs/hiera-puppet.git /etc/puppet/modules/hiera-puppet

# Copy init scripts
cp /opt/kanopya/scripts/init/* /etc/init.d/

# Now run the Kanopya setup
mkdir -p /var/cache/kanopya/monitor/

# replace download.kanopya.org in seput module
sed -i s/download.kanopya.org/integration01.intranet.hederatech.com/ /opt/kanopya/scripts/install/Setup/Linux.pm

if  [ -z "$NOINSTALL" ];
then
    echo "running setup.pl"
    cd /opt/kanopya/scripts/install
    perl setup.pl -f /vagrant/setup.inputs

    # stop some services if needed
    echo "Stop some kanopya services if required" 
    for SERVICE in $STOP_SERVICES ; do [ -f "/etc/init.d/$SERVICE" ] && /etc/init.d/$SERVICE stop ; done

    if [ -f /etc/redhat-release ]; then
        killall mysqld
        killall /usr/sbin/mysqld
        sleep 10
        /etc/init.d/puppetmaster restart
    fi
    
    /etc/init.d/mysql restart

    # Register the available hosts into Kanopya
    if [ -f /vagrant/register_hosts.pl ]; then
        echo "running register_hosts.pl"
        perl /vagrant/register_hosts.pl
    fi
fi

# Get deployment_solver JAR
echo "retrieve deployment solver"
wget -P /opt/kanopya/tools/constraint_engine/deployment_solver/ http://integration01.intranet.hederatech.com/constraint_engine/deployment_solver/deployment_solver.jar

# Get Choco capacity manager JAR
echo "retrieve Choco capacity manager"
wget -P /opt/kanopya/tools/constraint_engine/capacity_manager/ http://integration01.intranet.hederatech.com/constraint_engine/capacity_manager/capacity_manager.jar

# Set passenger in UTF-8
sed -i 's/\($0 = "master"\)/\1\nEncoding.default_external = Encoding::UTF_8\nEncoding.default_internal = Encoding::UTF_8/' /usr/share/puppet/rack/puppetmasterd/config.ru

# Set up code coverage
mkdir -p /result/cover_db && rm -rf /result/cover_db/*
export PERL5OPT="-MDevel::Cover=-db,/result/cover_db,-select,kanopya/lib,-subs_only,on"

# Set log level to DEBUG
sed -i s/rootLogger=INFO/rootLogger=DEBUG/ /opt/kanopya/conf/executor-log.conf
sed -i s/command=WARN/command=DEBUG/ /opt/kanopya/conf/executor-log.conf

# start atftpd
/etc/init.d/atftpd start

# replace etherwake binary for a virtual infrastructure
[ -e /vagrant/etherwake.py ] && cp /vagrant/etherwake.py /usr/sbin/etherwake 

# And finally, execute the test
cd /result
if  [ ! -z "$TEST" ];
then
    echo "running $TEST"
    yes "" | prove --formatter TAP::Formatter::JUnit /opt/kanopya/t/$TEST > /result/output.xml
elif [ ! -z "$API_TEST_DIR" ];
then
    (cd /opt/kanopya/ui/Frontend/ \
     && PERL5LIB=$PERL5LIB:/opt/kanopya/ui/Frontend/lib/ prove --formatter TAP::Formatter::JUnit t/$API_TEST_DIR/*.t > /result/output.xml)
fi

# Backup cover db before generate report (avoid information loss)
PERL5OPT="" cover -report Html_basic -outputdir /result/cover_result /result/cover_db
PERL5OPT="" cover -report clover -outputdir /result/clover /result/cover_db

if [ "$WEBUI" = "true" ];
then
    #cp /opt/kanopya/scripts/init/kanopya-front /etc/init.d/
    chmod +x /etc/init.d/kanopya-front
    /etc/init.d/kanopya-front start
    if [ -f "/etc/redhat-release" ];
    then
        yum -y install php phpmyadmin php-mcrypt
        sed -i "s/\(\$cfg\['blowfish_secret'\] = \)''/\1'GLUMOL'/" /usr/share/phpmyadmin/config.inc.php
        sed -i 's/Allow from 127.0.0.1/Allow from all/' /etc/httpd/conf.d/phpmyadmin.conf
        # TODO: remove this hack when Passenger is properly setup
        mv /etc/httpd/conf.d/rack.conf /root
        service httpd restart
    else
        apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -y --force-yes install phpmyadmin apache2 || true
        cp /etc/phpmyadmin/apache.conf /etc/apache2/conf.d/phpmyadmin.conf
        cat > /etc/phpmyadmin/config-db.php <<EOF
<?php
\$dbuser='root';
\$dbpass='K4n0pY4';
\$basepath='';
\$dbname='phpmyadmin';
\$dbserver='';
\$dbport='';
\$dbtype='mysql';
EOF
        service apache2 restart
    fi
fi
